#!/usr/bin/env ruby
# coding: utf-8

require 'player.rb'

def getch
  begin
    system("stty raw -echo")
    str = STDIN.getc
  ensure
    system("stty -raw echo")
  end
  return str
end

class Playlist
  def initialize(files)
    @files = files
    @ptr   = 0
  end

  def current
    return @files[@ptr]
  end

  def next!(n=1)
    @ptr = (@ptr + n) % @files.length
    return self.current
  end

  def prev!(n=1)
    @ptr = (@ptr - n) % @files.length
    return self.current
  end
end

begin
  files = Dir.glob(ARGV[0]).sort_by { rand }
  raise if files.length == 0
rescue
  puts "Failed to load files."
  exit
end

$player       = Player.new
$playlist     = Playlist.new(files)
$break        = false         # used to allow changing to the next song
$stop_signal  = "@P 0\n"

Thread.new do
  loop do
    { 
      'p' => lambda { $player.pause               }, 
      'q' => lambda { $player.quit; Kernel::exit  },
      '.' => lambda { $break = true               },
      ',' => lambda { $break = true; $p.prev!(2)  }
    }[getch].call
  end
end

loop do
  print "#{File.basename($playlist.next!, ".mp3")}\n\r"
  $player.load($playlist.current)
  while $player.gets != $stop_signal
    # check whether the user has skipped this song
    # FIXME: this functionality should be implemented by the player class.
    ( $break = false; break ) if $break
  end
end
